trigger:
- none

resources:
- repo: self

variables:  
  dockerRegistryServiceConnection: ContainerRegistry
  imageRepository: 'webshop'
  containerRegistry: containerregistry32.azurecr.io
  tag: '$(Build.BuildId)'

  kubernetsServiceConnection: 'Kubernetes'

  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DockerCompose@0
      displayName: Build images
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscriptionEndpoint: AzureSubscription
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: '**/docker-compose.yml'
        additionalImageTags: $(tag)
        action: 'Build services' 
        
    - task: DockerCompose@0
      displayName: Push images
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscriptionEndpoint: AzureSubscription
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: '**/docker-compose.yml'
        additionalImageTags: $(tag)
        action: 'Push services'

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: './.azure/pipelines/deployment/manifests'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'WebShop-1801.web-app'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: 'Set environment variable in Kubernetes deployment'
            inputs:
              command: set
              kubernetesServiceEndpoint: 'Kubernetes'
              namespace: web-app
              arguments: env deployment/webshop AZURECONFIGURATION=$(APPCONFIG) SECRET=$(SECRET)     
              
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(IMAGEPULLSECRET)
              namespace: web-app
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: web-app
              manifests: |
                $(Pipeline.Workspace)/**/manifests/deployment.yml
                $(Pipeline.Workspace)/**/manifests/service.yml
              imagePullSecrets: |
                $(IMAGEPULLSECRET)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
         


