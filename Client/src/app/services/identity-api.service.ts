//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class IdentityApiService {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param body (optional)
   * @return Created
   */
  registerUser(body?: RegistrationUserDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/identity";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processRegisterUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRegisterUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processRegisterUser(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  loginUser(body?: AuthenticationUserDto | undefined): Observable<TokenDto> {
    let url_ = this.baseUrl + "/api/identity/login";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processLoginUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLoginUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<TokenDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<TokenDto>;
    }));
  }

  protected processLoginUser(response: HttpResponseBase): Observable<TokenDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TokenDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  refreshToken(body?: TokenDto | undefined): Observable<TokenDto> {
    let url_ = this.baseUrl + "/api/token";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processRefreshToken(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRefreshToken(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<TokenDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<TokenDto>;
    }));
  }

  protected processRefreshToken(response: HttpResponseBase): Observable<TokenDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TokenDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class AuthenticationUserDto implements IAuthenticationUserDto {
  userName?: string | null;
  password?: string | null;

  constructor(data?: IAuthenticationUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
    }
  }

  static fromJS(data: any): AuthenticationUserDto {
    data = typeof data === 'object' ? data : {};
    let result = new AuthenticationUserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userName"] = this.userName !== undefined ? this.userName : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    return data;
  }
}

export interface IAuthenticationUserDto {
  userName?: string | null;
  password?: string | null;
}

export class RegistrationUserDto implements IRegistrationUserDto {
  firstName?: string | null;
  lastName?: string | null;
  userName?: string | null;
  password?: string | null;
  email?: string | null;
  phoneNumber?: string | null;
  roles?: string[] | null;

  constructor(data?: IRegistrationUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
      this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
      this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
      this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
      this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
      if (Array.isArray(_data["roles"])) {
        this.roles = [] as any;
        for (let item of _data["roles"])
          this.roles!.push(item);
      }
      else {
        this.roles = <any>null;
      }
    }
  }

  static fromJS(data: any): RegistrationUserDto {
    data = typeof data === 'object' ? data : {};
    let result = new RegistrationUserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
    data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
    data["userName"] = this.userName !== undefined ? this.userName : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    data["email"] = this.email !== undefined ? this.email : <any>null;
    data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
    if (Array.isArray(this.roles)) {
      data["roles"] = [];
      for (let item of this.roles)
        data["roles"].push(item);
    }
    return data;
  }
}

export interface IRegistrationUserDto {
  firstName?: string | null;
  lastName?: string | null;
  userName?: string | null;
  password?: string | null;
  email?: string | null;
  phoneNumber?: string | null;
  roles?: string[] | null;
}

export class TokenDto implements ITokenDto {
  accessToken?: string | null;
  refreshToken?: string | null;

  constructor(data?: ITokenDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.accessToken = _data["accessToken"] !== undefined ? _data["accessToken"] : <any>null;
      this.refreshToken = _data["refreshToken"] !== undefined ? _data["refreshToken"] : <any>null;
    }
  }

  static fromJS(data: any): TokenDto {
    data = typeof data === 'object' ? data : {};
    let result = new TokenDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["accessToken"] = this.accessToken !== undefined ? this.accessToken : <any>null;
    data["refreshToken"] = this.refreshToken !== undefined ? this.refreshToken : <any>null;
    return data;
  }
}

export interface ITokenDto {
  accessToken?: string | null;
  refreshToken?: string | null;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
