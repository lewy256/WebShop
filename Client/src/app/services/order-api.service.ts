//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import {ApiBase} from "./api-base";

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class OrderApiService extends ApiBase {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    super();
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createAddress(body?: AddressRequest | undefined): Observable<AddressDto> {
    let url_ = this.baseUrl + "/api/addresses";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("post", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processCreateAddress(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateAddress(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AddressDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AddressDto>;
    }));
  }

  protected processCreateAddress(response: HttpResponseBase): Observable<AddressDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = AddressDto.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getAddresses(): Observable<AddressDto[]> {
    let url_ = this.baseUrl + "/api/addresses";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAddresses(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAddresses(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AddressDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AddressDto[]>;
    }));
  }

  protected processGetAddresses(response: HttpResponseBase): Observable<AddressDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(AddressDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return No Content
   */
  deleteAddress(id: number): Observable<void> {
    let url_ = this.baseUrl + "/api/addresses/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("delete", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteAddress(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteAddress(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteAddress(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getAddress(id: number): Observable<AddressDto> {
    let url_ = this.baseUrl + "/api/addresses/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAddress(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAddress(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AddressDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AddressDto>;
    }));
  }

  protected processGetAddress(response: HttpResponseBase): Observable<AddressDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AddressDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return No Content
   */
  patchAddress(id: number, body: any): Observable<void> {
    let url_ = this.baseUrl + "/api/addresses/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("patch", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processPatchAddress(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processPatchAddress(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processPatchAddress(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  updateAddress(id: number, body?: AddressRequest | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/addresses/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("put", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateAddress(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateAddress(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateAddress(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createCoupon(body?: CouponRequest | undefined): Observable<CouponDto> {
    let url_ = this.baseUrl + "/api/coupons";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("post", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processCreateCoupon(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateCoupon(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CouponDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CouponDto>;
    }));
  }

  protected processCreateCoupon(response: HttpResponseBase): Observable<CouponDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = CouponDto.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getCoupons(): Observable<CouponDto[]> {
    let url_ = this.baseUrl + "/api/coupons";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetCoupons(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetCoupons(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CouponDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CouponDto[]>;
    }));
  }

  protected processGetCoupons(response: HttpResponseBase): Observable<CouponDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(CouponDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return No Content
   */
  deleteCoupon(id: number): Observable<void> {
    let url_ = this.baseUrl + "/api/coupons/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("delete", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteCoupon(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteCoupon(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteCoupon(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getCoupon(id: number): Observable<CouponDto> {
    let url_ = this.baseUrl + "/api/coupons/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetCoupon(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetCoupon(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CouponDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CouponDto>;
    }));
  }

  protected processGetCoupon(response: HttpResponseBase): Observable<CouponDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CouponDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  updateCoupon(id: number, body?: CouponRequest | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/coupons/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("put", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateCoupon(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateCoupon(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateCoupon(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createOrder(body?: OrderRequest | undefined): Observable<OrderDto> {
    let url_ = this.baseUrl + "/api/orders";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("post", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processCreateOrder(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateOrder(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<OrderDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<OrderDto>;
    }));
  }

  protected processCreateOrder(response: HttpResponseBase): Observable<OrderDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = OrderDto.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param pageNumber (optional)
   * @param pageSize (optional)
   * @param startDate (optional)
   * @param endDate (optional)
   * @return Success
   */
  getOrdersForCustomer(pageNumber?: number | undefined, pageSize?: number | undefined, startDate?: Date | undefined, endDate?: Date | undefined): Observable<OrderDto[]> {
    let url_ = this.baseUrl + "/api/orders?";
    if (pageNumber === null)
      throw new Error("The parameter 'pageNumber' cannot be null.");
    else if (pageNumber !== undefined)
      url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (startDate === null)
      throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
    if (endDate === null)
      throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetOrdersForCustomer(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetOrdersForCustomer(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<OrderDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<OrderDto[]>;
    }));
  }

  protected processGetOrdersForCustomer(response: HttpResponseBase): Observable<OrderDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(OrderDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return No Content
   */
  deleteOrder(id: number): Observable<void> {
    let url_ = this.baseUrl + "/api/orders/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("delete", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteOrder(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteOrder(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteOrder(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getOrderForCustomer(id: number): Observable<OrderSummaryDto> {
    let url_ = this.baseUrl + "/api/orders/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetOrderForCustomer(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetOrderForCustomer(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<OrderSummaryDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<OrderSummaryDto>;
    }));
  }

  protected processGetOrderForCustomer(response: HttpResponseBase): Observable<OrderSummaryDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OrderSummaryDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createPaymentMethod(body?: PaymentMethodRequest | undefined): Observable<PaymentMethodDto> {
    let url_ = this.baseUrl + "/api/payment-methods";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("post", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processCreatePaymentMethod(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreatePaymentMethod(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PaymentMethodDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PaymentMethodDto>;
    }));
  }

  protected processCreatePaymentMethod(response: HttpResponseBase): Observable<PaymentMethodDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = PaymentMethodDto.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getPaymentMethods(): Observable<PaymentMethodDto[]> {
    let url_ = this.baseUrl + "/api/payment-methods";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetPaymentMethods(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetPaymentMethods(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PaymentMethodDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PaymentMethodDto[]>;
    }));
  }

  protected processGetPaymentMethods(response: HttpResponseBase): Observable<PaymentMethodDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(PaymentMethodDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return No Content
   */
  deletePaymentMethod(id: number): Observable<void> {
    let url_ = this.baseUrl + "/api/payment-methods/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("delete", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processDeletePaymentMethod(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeletePaymentMethod(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeletePaymentMethod(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getPaymentMethod(id: number): Observable<PaymentMethodDto> {
    let url_ = this.baseUrl + "/api/payment-methods/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetPaymentMethod(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetPaymentMethod(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PaymentMethodDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PaymentMethodDto>;
    }));
  }

  protected processGetPaymentMethod(response: HttpResponseBase): Observable<PaymentMethodDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaymentMethodDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  updatePaymentMethod(id: number, body?: PaymentMethodRequest | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/payment-methods/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("put", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdatePaymentMethod(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdatePaymentMethod(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdatePaymentMethod(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createShipMethod(body?: ShipMethodRequest | undefined): Observable<ShipMethodDto> {
    let url_ = this.baseUrl + "/api/ship-methods";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("post", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processCreateShipMethod(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateShipMethod(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ShipMethodDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ShipMethodDto>;
    }));
  }

  protected processCreateShipMethod(response: HttpResponseBase): Observable<ShipMethodDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = ShipMethodDto.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getShipMethods(): Observable<ShipMethodDto[]> {
    let url_ = this.baseUrl + "/api/ship-methods";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetShipMethods(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetShipMethods(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ShipMethodDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ShipMethodDto[]>;
    }));
  }

  protected processGetShipMethods(response: HttpResponseBase): Observable<ShipMethodDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ShipMethodDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return No Content
   */
  deleteShipMethod(id: number): Observable<void> {
    let url_ = this.baseUrl + "/api/ship-methods/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("delete", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteShipMethod(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteShipMethod(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteShipMethod(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getShipMethod(id: number): Observable<ShipMethodDto> {
    let url_ = this.baseUrl + "/api/ship-methods/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetShipMethod(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetShipMethod(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ShipMethodDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ShipMethodDto>;
    }));
  }

  protected processGetShipMethod(response: HttpResponseBase): Observable<ShipMethodDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ShipMethodDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  updateShipMethod(id: number, body?: ShipMethodRequest | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/ship-methods/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("put", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateShipMethod(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateShipMethod(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateShipMethod(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createOrderStatus(body?: OrderStatusRequest | undefined): Observable<SpecOrderStatus> {
    let url_ = this.baseUrl + "/api/order-statuses";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("post", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processCreateOrderStatus(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateOrderStatus(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SpecOrderStatus>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SpecOrderStatus>;
    }));
  }

  protected processCreateOrderStatus(response: HttpResponseBase): Observable<SpecOrderStatus> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = SpecOrderStatus.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return No Content
   */
  deleteOrderStatus(id: number): Observable<void> {
    let url_ = this.baseUrl + "/api/order-statuses/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("delete", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteOrderStatus(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteOrderStatus(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteOrderStatus(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createStatus(body?: StatusRequest | undefined): Observable<StatusDto> {
    let url_ = this.baseUrl + "/api/statuses";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("post", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processCreateStatus(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateStatus(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<StatusDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<StatusDto>;
    }));
  }

  protected processCreateStatus(response: HttpResponseBase): Observable<StatusDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = StatusDto.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getStatuses(): Observable<StatusDto[]> {
    let url_ = this.baseUrl + "/api/statuses";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetStatuses(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetStatuses(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<StatusDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<StatusDto[]>;
    }));
  }

  protected processGetStatuses(response: HttpResponseBase): Observable<StatusDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(StatusDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return No Content
   */
  deleteStatus(id: number): Observable<void> {
    let url_ = this.baseUrl + "/api/statuses/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("delete", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteStatus(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteStatus(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteStatus(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getStatus(id: number): Observable<StatusDto> {
    let url_ = this.baseUrl + "/api/statuses/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("get", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processGetStatus(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetStatus(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<StatusDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<StatusDto>;
    }));
  }

  protected processGetStatus(response: HttpResponseBase): Observable<StatusDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StatusDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  updateStatus(id: number, body?: StatusRequest | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/statuses/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
      return this.http.request("put", url_, transformedOptions_);
    })).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateStatus(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateStatus(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateStatus(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Bad Request", status, _responseText, _headers);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Not Found", status, _responseText, _headers);
      }));
    } else if (status === 422) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Client Error", status, _responseText, _headers);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class Address implements IAddress {
  addressId?: number;
  firstName?: string | null;
  lastName?: string | null;
  addressLine1?: string | null;
  addressLine2?: string | null;
  postalCode?: string | null;
  phone?: string | null;
  country?: string | null;
  city?: string | null;
  customerId?: string;
  order?: Order[] | null;

  constructor(data?: IAddress) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.addressId = _data["addressId"] !== undefined ? _data["addressId"] : <any>null;
      this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
      this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
      this.addressLine1 = _data["addressLine1"] !== undefined ? _data["addressLine1"] : <any>null;
      this.addressLine2 = _data["addressLine2"] !== undefined ? _data["addressLine2"] : <any>null;
      this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
      this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
      this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
      this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
      this.customerId = _data["customerId"] !== undefined ? _data["customerId"] : <any>null;
      if (Array.isArray(_data["order"])) {
        this.order = [] as any;
        for (let item of _data["order"])
          this.order!.push(Order.fromJS(item));
      }
      else {
        this.order = <any>null;
      }
    }
  }

  static fromJS(data: any): Address {
    data = typeof data === 'object' ? data : {};
    let result = new Address();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["addressId"] = this.addressId !== undefined ? this.addressId : <any>null;
    data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
    data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
    data["addressLine1"] = this.addressLine1 !== undefined ? this.addressLine1 : <any>null;
    data["addressLine2"] = this.addressLine2 !== undefined ? this.addressLine2 : <any>null;
    data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
    data["phone"] = this.phone !== undefined ? this.phone : <any>null;
    data["country"] = this.country !== undefined ? this.country : <any>null;
    data["city"] = this.city !== undefined ? this.city : <any>null;
    data["customerId"] = this.customerId !== undefined ? this.customerId : <any>null;
    if (Array.isArray(this.order)) {
      data["order"] = [];
      for (let item of this.order)
        data["order"].push(item.toJSON());
    }
    return data;
  }
}

export interface IAddress {
  addressId?: number;
  firstName?: string | null;
  lastName?: string | null;
  addressLine1?: string | null;
  addressLine2?: string | null;
  postalCode?: string | null;
  phone?: string | null;
  country?: string | null;
  city?: string | null;
  customerId?: string;
  order?: Order[] | null;
}

export class AddressDto implements IAddressDto {
  addressId?: number;
  firstName?: string | null;
  lastName?: string | null;
  addressLine1?: string | null;
  addressLine2?: string | null;
  postalCode?: string | null;
  phone?: string | null;
  country?: string | null;
  city?: string | null;

  constructor(data?: IAddressDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.addressId = _data["addressId"] !== undefined ? _data["addressId"] : <any>null;
      this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
      this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
      this.addressLine1 = _data["addressLine1"] !== undefined ? _data["addressLine1"] : <any>null;
      this.addressLine2 = _data["addressLine2"] !== undefined ? _data["addressLine2"] : <any>null;
      this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
      this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
      this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
      this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
    }
  }

  static fromJS(data: any): AddressDto {
    data = typeof data === 'object' ? data : {};
    let result = new AddressDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["addressId"] = this.addressId !== undefined ? this.addressId : <any>null;
    data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
    data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
    data["addressLine1"] = this.addressLine1 !== undefined ? this.addressLine1 : <any>null;
    data["addressLine2"] = this.addressLine2 !== undefined ? this.addressLine2 : <any>null;
    data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
    data["phone"] = this.phone !== undefined ? this.phone : <any>null;
    data["country"] = this.country !== undefined ? this.country : <any>null;
    data["city"] = this.city !== undefined ? this.city : <any>null;
    return data;
  }
}

export interface IAddressDto {
  addressId?: number;
  firstName?: string | null;
  lastName?: string | null;
  addressLine1?: string | null;
  addressLine2?: string | null;
  postalCode?: string | null;
  phone?: string | null;
  country?: string | null;
  city?: string | null;
}

export class AddressRequest implements IAddressRequest {
  firstName?: string | null;
  lastName?: string | null;
  addressLine1?: string | null;
  addressLine2?: string | null;
  postalCode?: string | null;
  phone?: string | null;
  country?: string | null;
  city?: string | null;

  constructor(data?: IAddressRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
      this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
      this.addressLine1 = _data["addressLine1"] !== undefined ? _data["addressLine1"] : <any>null;
      this.addressLine2 = _data["addressLine2"] !== undefined ? _data["addressLine2"] : <any>null;
      this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
      this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
      this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
      this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
    }
  }

  static fromJS(data: any): AddressRequest {
    data = typeof data === 'object' ? data : {};
    let result = new AddressRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
    data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
    data["addressLine1"] = this.addressLine1 !== undefined ? this.addressLine1 : <any>null;
    data["addressLine2"] = this.addressLine2 !== undefined ? this.addressLine2 : <any>null;
    data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
    data["phone"] = this.phone !== undefined ? this.phone : <any>null;
    data["country"] = this.country !== undefined ? this.country : <any>null;
    data["city"] = this.city !== undefined ? this.city : <any>null;
    return data;
  }
}

export interface IAddressRequest {
  firstName?: string | null;
  lastName?: string | null;
  addressLine1?: string | null;
  addressLine2?: string | null;
  postalCode?: string | null;
  phone?: string | null;
  country?: string | null;
  city?: string | null;
}

export class Coupon implements ICoupon {
  couponId?: number;
  code?: string | null;
  description?: string | null;
  amount?: number;
  order?: Order[] | null;

  constructor(data?: ICoupon) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.couponId = _data["couponId"] !== undefined ? _data["couponId"] : <any>null;
      this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
      this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
      if (Array.isArray(_data["order"])) {
        this.order = [] as any;
        for (let item of _data["order"])
          this.order!.push(Order.fromJS(item));
      }
      else {
        this.order = <any>null;
      }
    }
  }

  static fromJS(data: any): Coupon {
    data = typeof data === 'object' ? data : {};
    let result = new Coupon();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["couponId"] = this.couponId !== undefined ? this.couponId : <any>null;
    data["code"] = this.code !== undefined ? this.code : <any>null;
    data["description"] = this.description !== undefined ? this.description : <any>null;
    data["amount"] = this.amount !== undefined ? this.amount : <any>null;
    if (Array.isArray(this.order)) {
      data["order"] = [];
      for (let item of this.order)
        data["order"].push(item.toJSON());
    }
    return data;
  }
}

export interface ICoupon {
  couponId?: number;
  code?: string | null;
  description?: string | null;
  amount?: number;
  order?: Order[] | null;
}

export class CouponDto implements ICouponDto {
  couponId?: number;
  code?: string | null;
  description?: string | null;
  amount?: number;

  constructor(data?: ICouponDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.couponId = _data["couponId"] !== undefined ? _data["couponId"] : <any>null;
      this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
      this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
    }
  }

  static fromJS(data: any): CouponDto {
    data = typeof data === 'object' ? data : {};
    let result = new CouponDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["couponId"] = this.couponId !== undefined ? this.couponId : <any>null;
    data["code"] = this.code !== undefined ? this.code : <any>null;
    data["description"] = this.description !== undefined ? this.description : <any>null;
    data["amount"] = this.amount !== undefined ? this.amount : <any>null;
    return data;
  }
}

export interface ICouponDto {
  couponId?: number;
  code?: string | null;
  description?: string | null;
  amount?: number;
}

export class CouponRequest implements ICouponRequest {
  code?: string | null;
  description?: string | null;
  amount?: number;

  constructor(data?: ICouponRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
      this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
    }
  }

  static fromJS(data: any): CouponRequest {
    data = typeof data === 'object' ? data : {};
    let result = new CouponRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["code"] = this.code !== undefined ? this.code : <any>null;
    data["description"] = this.description !== undefined ? this.description : <any>null;
    data["amount"] = this.amount !== undefined ? this.amount : <any>null;
    return data;
  }
}

export interface ICouponRequest {
  code?: string | null;
  description?: string | null;
  amount?: number;
}

export class Order implements IOrder {
  orderId?: number;
  customerId?: string;
  orderDate?: Date;
  paymentMethodId?: number;
  addressId?: number;
  shipMethodId?: number;
  totalPrice?: number;
  notes?: string | null;
  couponId?: number | null;
  orderName?: string;
  address?: Address;
  coupon?: Coupon;
  paymentMethod?: PaymentMethod;
  shipMethod?: ShipMethod;
  orderItem?: OrderItem[] | null;
  specOrderStatus?: SpecOrderStatus[] | null;

  constructor(data?: IOrder) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderId = _data["orderId"] !== undefined ? _data["orderId"] : <any>null;
      this.customerId = _data["customerId"] !== undefined ? _data["customerId"] : <any>null;
      this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>null;
      this.paymentMethodId = _data["paymentMethodId"] !== undefined ? _data["paymentMethodId"] : <any>null;
      this.addressId = _data["addressId"] !== undefined ? _data["addressId"] : <any>null;
      this.shipMethodId = _data["shipMethodId"] !== undefined ? _data["shipMethodId"] : <any>null;
      this.totalPrice = _data["totalPrice"] !== undefined ? _data["totalPrice"] : <any>null;
      this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
      this.couponId = _data["couponId"] !== undefined ? _data["couponId"] : <any>null;
      this.orderName = _data["orderName"] !== undefined ? _data["orderName"] : <any>null;
      this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>null;
      this.coupon = _data["coupon"] ? Coupon.fromJS(_data["coupon"]) : <any>null;
      this.paymentMethod = _data["paymentMethod"] ? PaymentMethod.fromJS(_data["paymentMethod"]) : <any>null;
      this.shipMethod = _data["shipMethod"] ? ShipMethod.fromJS(_data["shipMethod"]) : <any>null;
      if (Array.isArray(_data["orderItem"])) {
        this.orderItem = [] as any;
        for (let item of _data["orderItem"])
          this.orderItem!.push(OrderItem.fromJS(item));
      }
      else {
        this.orderItem = <any>null;
      }
      if (Array.isArray(_data["specOrderStatus"])) {
        this.specOrderStatus = [] as any;
        for (let item of _data["specOrderStatus"])
          this.specOrderStatus!.push(SpecOrderStatus.fromJS(item));
      }
      else {
        this.specOrderStatus = <any>null;
      }
    }
  }

  static fromJS(data: any): Order {
    data = typeof data === 'object' ? data : {};
    let result = new Order();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
    data["customerId"] = this.customerId !== undefined ? this.customerId : <any>null;
    data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
    data["paymentMethodId"] = this.paymentMethodId !== undefined ? this.paymentMethodId : <any>null;
    data["addressId"] = this.addressId !== undefined ? this.addressId : <any>null;
    data["shipMethodId"] = this.shipMethodId !== undefined ? this.shipMethodId : <any>null;
    data["totalPrice"] = this.totalPrice !== undefined ? this.totalPrice : <any>null;
    data["notes"] = this.notes !== undefined ? this.notes : <any>null;
    data["couponId"] = this.couponId !== undefined ? this.couponId : <any>null;
    data["orderName"] = this.orderName !== undefined ? this.orderName : <any>null;
    data["address"] = this.address ? this.address.toJSON() : <any>null;
    data["coupon"] = this.coupon ? this.coupon.toJSON() : <any>null;
    data["paymentMethod"] = this.paymentMethod ? this.paymentMethod.toJSON() : <any>null;
    data["shipMethod"] = this.shipMethod ? this.shipMethod.toJSON() : <any>null;
    if (Array.isArray(this.orderItem)) {
      data["orderItem"] = [];
      for (let item of this.orderItem)
        data["orderItem"].push(item.toJSON());
    }
    if (Array.isArray(this.specOrderStatus)) {
      data["specOrderStatus"] = [];
      for (let item of this.specOrderStatus)
        data["specOrderStatus"].push(item.toJSON());
    }
    return data;
  }
}

export interface IOrder {
  orderId?: number;
  customerId?: string;
  orderDate?: Date;
  paymentMethodId?: number;
  addressId?: number;
  shipMethodId?: number;
  totalPrice?: number;
  notes?: string | null;
  couponId?: number | null;
  orderName?: string;
  address?: Address;
  coupon?: Coupon;
  paymentMethod?: PaymentMethod;
  shipMethod?: ShipMethod;
  orderItem?: OrderItem[] | null;
  specOrderStatus?: SpecOrderStatus[] | null;
}

export class OrderDto implements IOrderDto {
  orderId?: number;
  orderName?: string;
  orderDate?: Date;
  totalPrice?: number;

  constructor(data?: IOrderDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderId = _data["orderId"] !== undefined ? _data["orderId"] : <any>null;
      this.orderName = _data["orderName"] !== undefined ? _data["orderName"] : <any>null;
      this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>null;
      this.totalPrice = _data["totalPrice"] !== undefined ? _data["totalPrice"] : <any>null;
    }
  }

  static fromJS(data: any): OrderDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
    data["orderName"] = this.orderName !== undefined ? this.orderName : <any>null;
    data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
    data["totalPrice"] = this.totalPrice !== undefined ? this.totalPrice : <any>null;
    return data;
  }
}

export interface IOrderDto {
  orderId?: number;
  orderName?: string;
  orderDate?: Date;
  totalPrice?: number;
}

export class OrderItem implements IOrderItem {
  orderItemId?: number;
  price?: number;
  quantity?: number;
  orderId?: number;
  productId?: string;
  order?: Order;

  constructor(data?: IOrderItem) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderItemId = _data["orderItemId"] !== undefined ? _data["orderItemId"] : <any>null;
      this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
      this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
      this.orderId = _data["orderId"] !== undefined ? _data["orderId"] : <any>null;
      this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
      this.order = _data["order"] ? Order.fromJS(_data["order"]) : <any>null;
    }
  }

  static fromJS(data: any): OrderItem {
    data = typeof data === 'object' ? data : {};
    let result = new OrderItem();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderItemId"] = this.orderItemId !== undefined ? this.orderItemId : <any>null;
    data["price"] = this.price !== undefined ? this.price : <any>null;
    data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
    data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
    data["productId"] = this.productId !== undefined ? this.productId : <any>null;
    data["order"] = this.order ? this.order.toJSON() : <any>null;
    return data;
  }
}

export interface IOrderItem {
  orderItemId?: number;
  price?: number;
  quantity?: number;
  orderId?: number;
  productId?: string;
  order?: Order;
}

export class OrderItemDto implements IOrderItemDto {
  orderItemId?: number;
  price?: number;
  quantity?: number;
  productId?: string;

  constructor(data?: IOrderItemDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderItemId = _data["orderItemId"] !== undefined ? _data["orderItemId"] : <any>null;
      this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
      this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
      this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
    }
  }

  static fromJS(data: any): OrderItemDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderItemDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderItemId"] = this.orderItemId !== undefined ? this.orderItemId : <any>null;
    data["price"] = this.price !== undefined ? this.price : <any>null;
    data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
    data["productId"] = this.productId !== undefined ? this.productId : <any>null;
    return data;
  }
}

export interface IOrderItemDto {
  orderItemId?: number;
  price?: number;
  quantity?: number;
  productId?: string;
}

export class OrderRequest implements IOrderRequest {
  paymentMethodId?: number;
  addressId?: number;
  shipMethodId?: number;
  totalPrice?: number;
  notes?: string | null;
  couponId?: number | null;

  constructor(data?: IOrderRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.paymentMethodId = _data["paymentMethodId"] !== undefined ? _data["paymentMethodId"] : <any>null;
      this.addressId = _data["addressId"] !== undefined ? _data["addressId"] : <any>null;
      this.shipMethodId = _data["shipMethodId"] !== undefined ? _data["shipMethodId"] : <any>null;
      this.totalPrice = _data["totalPrice"] !== undefined ? _data["totalPrice"] : <any>null;
      this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
      this.couponId = _data["couponId"] !== undefined ? _data["couponId"] : <any>null;
    }
  }

  static fromJS(data: any): OrderRequest {
    data = typeof data === 'object' ? data : {};
    let result = new OrderRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["paymentMethodId"] = this.paymentMethodId !== undefined ? this.paymentMethodId : <any>null;
    data["addressId"] = this.addressId !== undefined ? this.addressId : <any>null;
    data["shipMethodId"] = this.shipMethodId !== undefined ? this.shipMethodId : <any>null;
    data["totalPrice"] = this.totalPrice !== undefined ? this.totalPrice : <any>null;
    data["notes"] = this.notes !== undefined ? this.notes : <any>null;
    data["couponId"] = this.couponId !== undefined ? this.couponId : <any>null;
    return data;
  }
}

export interface IOrderRequest {
  paymentMethodId?: number;
  addressId?: number;
  shipMethodId?: number;
  totalPrice?: number;
  notes?: string | null;
  couponId?: number | null;
}

export class OrderStatusRequest implements IOrderStatusRequest {
  orderId?: number;
  statusId?: number;

  constructor(data?: IOrderStatusRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderId = _data["orderId"] !== undefined ? _data["orderId"] : <any>null;
      this.statusId = _data["statusId"] !== undefined ? _data["statusId"] : <any>null;
    }
  }

  static fromJS(data: any): OrderStatusRequest {
    data = typeof data === 'object' ? data : {};
    let result = new OrderStatusRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
    data["statusId"] = this.statusId !== undefined ? this.statusId : <any>null;
    return data;
  }
}

export interface IOrderStatusRequest {
  orderId?: number;
  statusId?: number;
}

export class OrderSummaryDto implements IOrderSummaryDto {
  orderId?: number;
  orderName?: string;
  orderDate?: Date;
  paymentMethod?: PaymentMethodDto;
  address?: AddressDto;
  shipMethod?: ShipMethodDto;
  totalPrice?: number;
  notes?: string | null;
  coupon?: CouponDto;
  orderItems?: OrderItemDto[] | null;
  statuses?: StatusDto[] | null;

  constructor(data?: IOrderSummaryDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderId = _data["orderId"] !== undefined ? _data["orderId"] : <any>null;
      this.orderName = _data["orderName"] !== undefined ? _data["orderName"] : <any>null;
      this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>null;
      this.paymentMethod = _data["paymentMethod"] ? PaymentMethodDto.fromJS(_data["paymentMethod"]) : <any>null;
      this.address = _data["address"] ? AddressDto.fromJS(_data["address"]) : <any>null;
      this.shipMethod = _data["shipMethod"] ? ShipMethodDto.fromJS(_data["shipMethod"]) : <any>null;
      this.totalPrice = _data["totalPrice"] !== undefined ? _data["totalPrice"] : <any>null;
      this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
      this.coupon = _data["coupon"] ? CouponDto.fromJS(_data["coupon"]) : <any>null;
      if (Array.isArray(_data["orderItems"])) {
        this.orderItems = [] as any;
        for (let item of _data["orderItems"])
          this.orderItems!.push(OrderItemDto.fromJS(item));
      }
      else {
        this.orderItems = <any>null;
      }
      if (Array.isArray(_data["statuses"])) {
        this.statuses = [] as any;
        for (let item of _data["statuses"])
          this.statuses!.push(StatusDto.fromJS(item));
      }
      else {
        this.statuses = <any>null;
      }
    }
  }

  static fromJS(data: any): OrderSummaryDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderSummaryDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
    data["orderName"] = this.orderName !== undefined ? this.orderName : <any>null;
    data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
    data["paymentMethod"] = this.paymentMethod ? this.paymentMethod.toJSON() : <any>null;
    data["address"] = this.address ? this.address.toJSON() : <any>null;
    data["shipMethod"] = this.shipMethod ? this.shipMethod.toJSON() : <any>null;
    data["totalPrice"] = this.totalPrice !== undefined ? this.totalPrice : <any>null;
    data["notes"] = this.notes !== undefined ? this.notes : <any>null;
    data["coupon"] = this.coupon ? this.coupon.toJSON() : <any>null;
    if (Array.isArray(this.orderItems)) {
      data["orderItems"] = [];
      for (let item of this.orderItems)
        data["orderItems"].push(item.toJSON());
    }
    if (Array.isArray(this.statuses)) {
      data["statuses"] = [];
      for (let item of this.statuses)
        data["statuses"].push(item.toJSON());
    }
    return data;
  }
}

export interface IOrderSummaryDto {
  orderId?: number;
  orderName?: string;
  orderDate?: Date;
  paymentMethod?: PaymentMethodDto;
  address?: AddressDto;
  shipMethod?: ShipMethodDto;
  totalPrice?: number;
  notes?: string | null;
  coupon?: CouponDto;
  orderItems?: OrderItemDto[] | null;
  statuses?: StatusDto[] | null;
}

export class PaymentMethod implements IPaymentMethod {
  paymentMethodId?: number;
  name?: string | null;
  order?: Order[] | null;

  constructor(data?: IPaymentMethod) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.paymentMethodId = _data["paymentMethodId"] !== undefined ? _data["paymentMethodId"] : <any>null;
      this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
      if (Array.isArray(_data["order"])) {
        this.order = [] as any;
        for (let item of _data["order"])
          this.order!.push(Order.fromJS(item));
      }
      else {
        this.order = <any>null;
      }
    }
  }

  static fromJS(data: any): PaymentMethod {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentMethod();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["paymentMethodId"] = this.paymentMethodId !== undefined ? this.paymentMethodId : <any>null;
    data["name"] = this.name !== undefined ? this.name : <any>null;
    if (Array.isArray(this.order)) {
      data["order"] = [];
      for (let item of this.order)
        data["order"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPaymentMethod {
  paymentMethodId?: number;
  name?: string | null;
  order?: Order[] | null;
}

export class PaymentMethodDto implements IPaymentMethodDto {
  paymentMethodId?: number;
  name?: string | null;

  constructor(data?: IPaymentMethodDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.paymentMethodId = _data["paymentMethodId"] !== undefined ? _data["paymentMethodId"] : <any>null;
      this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
    }
  }

  static fromJS(data: any): PaymentMethodDto {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentMethodDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["paymentMethodId"] = this.paymentMethodId !== undefined ? this.paymentMethodId : <any>null;
    data["name"] = this.name !== undefined ? this.name : <any>null;
    return data;
  }
}

export interface IPaymentMethodDto {
  paymentMethodId?: number;
  name?: string | null;
}

export class PaymentMethodRequest implements IPaymentMethodRequest {
  name?: string | null;

  constructor(data?: IPaymentMethodRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
    }
  }

  static fromJS(data: any): PaymentMethodRequest {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentMethodRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name !== undefined ? this.name : <any>null;
    return data;
  }
}

export interface IPaymentMethodRequest {
  name?: string | null;
}

export class ShipMethod implements IShipMethod {
  shipMethodId?: number;
  description?: string | null;
  deliveryTime?: Date;
  price?: number;
  order?: Order[] | null;

  constructor(data?: IShipMethod) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.shipMethodId = _data["shipMethodId"] !== undefined ? _data["shipMethodId"] : <any>null;
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
      this.deliveryTime = _data["deliveryTime"] ? new Date(_data["deliveryTime"].toString()) : <any>null;
      this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
      if (Array.isArray(_data["order"])) {
        this.order = [] as any;
        for (let item of _data["order"])
          this.order!.push(Order.fromJS(item));
      }
      else {
        this.order = <any>null;
      }
    }
  }

  static fromJS(data: any): ShipMethod {
    data = typeof data === 'object' ? data : {};
    let result = new ShipMethod();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["shipMethodId"] = this.shipMethodId !== undefined ? this.shipMethodId : <any>null;
    data["description"] = this.description !== undefined ? this.description : <any>null;
    data["deliveryTime"] = this.deliveryTime ? this.deliveryTime.toISOString() : <any>null;
    data["price"] = this.price !== undefined ? this.price : <any>null;
    if (Array.isArray(this.order)) {
      data["order"] = [];
      for (let item of this.order)
        data["order"].push(item.toJSON());
    }
    return data;
  }
}

export interface IShipMethod {
  shipMethodId?: number;
  description?: string | null;
  deliveryTime?: Date;
  price?: number;
  order?: Order[] | null;
}

export class ShipMethodDto implements IShipMethodDto {
  shipMethodId?: number;
  description?: string | null;
  deliveryTime?: Date;
  price?: number;

  constructor(data?: IShipMethodDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.shipMethodId = _data["shipMethodId"] !== undefined ? _data["shipMethodId"] : <any>null;
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
      this.deliveryTime = _data["deliveryTime"] ? new Date(_data["deliveryTime"].toString()) : <any>null;
      this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
    }
  }

  static fromJS(data: any): ShipMethodDto {
    data = typeof data === 'object' ? data : {};
    let result = new ShipMethodDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["shipMethodId"] = this.shipMethodId !== undefined ? this.shipMethodId : <any>null;
    data["description"] = this.description !== undefined ? this.description : <any>null;
    data["deliveryTime"] = this.deliveryTime ? this.deliveryTime.toISOString() : <any>null;
    data["price"] = this.price !== undefined ? this.price : <any>null;
    return data;
  }
}

export interface IShipMethodDto {
  shipMethodId?: number;
  description?: string | null;
  deliveryTime?: Date;
  price?: number;
}

export class ShipMethodRequest implements IShipMethodRequest {
  description?: string | null;
  deliveryTime?: Date;
  price?: number;

  constructor(data?: IShipMethodRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
      this.deliveryTime = _data["deliveryTime"] ? new Date(_data["deliveryTime"].toString()) : <any>null;
      this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
    }
  }

  static fromJS(data: any): ShipMethodRequest {
    data = typeof data === 'object' ? data : {};
    let result = new ShipMethodRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["description"] = this.description !== undefined ? this.description : <any>null;
    data["deliveryTime"] = this.deliveryTime ? this.deliveryTime.toISOString() : <any>null;
    data["price"] = this.price !== undefined ? this.price : <any>null;
    return data;
  }
}

export interface IShipMethodRequest {
  description?: string | null;
  deliveryTime?: Date;
  price?: number;
}

export class SpecOrderStatus implements ISpecOrderStatus {
  specOrderStatusId?: number;
  orderId?: number;
  statusId?: number;
  statusDate?: Date;
  order?: Order;
  status?: Status;

  constructor(data?: ISpecOrderStatus) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.specOrderStatusId = _data["specOrderStatusId"] !== undefined ? _data["specOrderStatusId"] : <any>null;
      this.orderId = _data["orderId"] !== undefined ? _data["orderId"] : <any>null;
      this.statusId = _data["statusId"] !== undefined ? _data["statusId"] : <any>null;
      this.statusDate = _data["statusDate"] ? new Date(_data["statusDate"].toString()) : <any>null;
      this.order = _data["order"] ? Order.fromJS(_data["order"]) : <any>null;
      this.status = _data["status"] ? Status.fromJS(_data["status"]) : <any>null;
    }
  }

  static fromJS(data: any): SpecOrderStatus {
    data = typeof data === 'object' ? data : {};
    let result = new SpecOrderStatus();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["specOrderStatusId"] = this.specOrderStatusId !== undefined ? this.specOrderStatusId : <any>null;
    data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
    data["statusId"] = this.statusId !== undefined ? this.statusId : <any>null;
    data["statusDate"] = this.statusDate ? this.statusDate.toISOString() : <any>null;
    data["order"] = this.order ? this.order.toJSON() : <any>null;
    data["status"] = this.status ? this.status.toJSON() : <any>null;
    return data;
  }
}

export interface ISpecOrderStatus {
  specOrderStatusId?: number;
  orderId?: number;
  statusId?: number;
  statusDate?: Date;
  order?: Order;
  status?: Status;
}

export class Status implements IStatus {
  statusId?: number;
  description?: string | null;
  specOrderStatus?: SpecOrderStatus[] | null;

  constructor(data?: IStatus) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.statusId = _data["statusId"] !== undefined ? _data["statusId"] : <any>null;
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
      if (Array.isArray(_data["specOrderStatus"])) {
        this.specOrderStatus = [] as any;
        for (let item of _data["specOrderStatus"])
          this.specOrderStatus!.push(SpecOrderStatus.fromJS(item));
      }
      else {
        this.specOrderStatus = <any>null;
      }
    }
  }

  static fromJS(data: any): Status {
    data = typeof data === 'object' ? data : {};
    let result = new Status();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["statusId"] = this.statusId !== undefined ? this.statusId : <any>null;
    data["description"] = this.description !== undefined ? this.description : <any>null;
    if (Array.isArray(this.specOrderStatus)) {
      data["specOrderStatus"] = [];
      for (let item of this.specOrderStatus)
        data["specOrderStatus"].push(item.toJSON());
    }
    return data;
  }
}

export interface IStatus {
  statusId?: number;
  description?: string | null;
  specOrderStatus?: SpecOrderStatus[] | null;
}

export class StatusDto implements IStatusDto {
  statusId?: number;
  description?: string | null;

  constructor(data?: IStatusDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.statusId = _data["statusId"] !== undefined ? _data["statusId"] : <any>null;
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
    }
  }

  static fromJS(data: any): StatusDto {
    data = typeof data === 'object' ? data : {};
    let result = new StatusDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["statusId"] = this.statusId !== undefined ? this.statusId : <any>null;
    data["description"] = this.description !== undefined ? this.description : <any>null;
    return data;
  }
}

export interface IStatusDto {
  statusId?: number;
  description?: string | null;
}

export class StatusRequest implements IStatusRequest {
  description?: string | null;

  constructor(data?: IStatusRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
    }
  }

  static fromJS(data: any): StatusRequest {
    data = typeof data === 'object' ? data : {};
    let result = new StatusRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["description"] = this.description !== undefined ? this.description : <any>null;
    return data;
  }
}

export interface IStatusRequest {
  description?: string | null;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
