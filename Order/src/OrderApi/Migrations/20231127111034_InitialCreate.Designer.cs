// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderApi.Models;

#nullable disable

namespace OrderApi.Migrations
{
    [DbContext(typeof(OrderContext))]
    [Migration("20231127111034_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OrderApi.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("OrderApi.Models.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CouponId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("OrderApi.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("OrderApi.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    b.Property<int>("ShipMethodId")
                        .HasColumnType("int")
                        .HasColumnName("ShipMethodID");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(13,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CouponId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShipMethodId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("OrderApi.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(13,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("OrderApi.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("OrderApi.Models.ShipMethod", b =>
                {
                    b.Property<int>("ShipMethodId")
                        .HasColumnType("int")
                        .HasColumnName("ShipMethodID");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(13,2)");

                    b.HasKey("ShipMethodId");

                    b.ToTable("ShipMethod");
                });

            modelBuilder.Entity("OrderApi.Models.SpecCustomerAddress", b =>
                {
                    b.Property<int>("SpecCustomerAddressId")
                        .HasColumnType("int")
                        .HasColumnName("SpecCustomerAddressID");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.HasKey("SpecCustomerAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("SpecCustomerAddress");
                });

            modelBuilder.Entity("OrderApi.Models.SpecOrderStatus", b =>
                {
                    b.Property<int>("SpecOrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SpecOrderStatusID");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("SpecOrderStatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StatusId");

                    b.ToTable("SpecOrderStatus");
                });

            modelBuilder.Entity("OrderApi.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("Description")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("OrderApi.Models.Order", b =>
                {
                    b.HasOne("OrderApi.Models.Address", "Address")
                        .WithMany("Order")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Address");

                    b.HasOne("OrderApi.Models.Coupon", "Coupon")
                        .WithMany("Order")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_Order_Coupon");

                    b.HasOne("OrderApi.Models.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customer");

                    b.HasOne("OrderApi.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Order")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_PaymentMethod");

                    b.HasOne("OrderApi.Models.ShipMethod", "ShipMethod")
                        .WithMany("Order")
                        .HasForeignKey("ShipMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_ShipMethod");

                    b.Navigation("Address");

                    b.Navigation("Coupon");

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ShipMethod");
                });

            modelBuilder.Entity("OrderApi.Models.OrderItem", b =>
                {
                    b.HasOne("OrderApi.Models.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderApi.Models.SpecCustomerAddress", b =>
                {
                    b.HasOne("OrderApi.Models.Address", "Address")
                        .WithMany("SpecCustomerAddress")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_SpecCustomerAddress_Address");

                    b.HasOne("OrderApi.Models.Customer", "Customer")
                        .WithMany("SpecCustomerAddress")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_SpecCustomerAddress_Customer");

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OrderApi.Models.SpecOrderStatus", b =>
                {
                    b.HasOne("OrderApi.Models.Order", "Order")
                        .WithMany("SpecOrderStatus")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_SpecOrderStatus_Order");

                    b.HasOne("OrderApi.Models.Status", "Status")
                        .WithMany("SpecOrderStatus")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_SpecOrderStatus_Status");

                    b.Navigation("Order");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("OrderApi.Models.Address", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("SpecCustomerAddress");
                });

            modelBuilder.Entity("OrderApi.Models.Coupon", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderApi.Models.Customer", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("SpecCustomerAddress");
                });

            modelBuilder.Entity("OrderApi.Models.Order", b =>
                {
                    b.Navigation("OrderItem");

                    b.Navigation("SpecOrderStatus");
                });

            modelBuilder.Entity("OrderApi.Models.PaymentMethod", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderApi.Models.ShipMethod", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderApi.Models.Status", b =>
                {
                    b.Navigation("SpecOrderStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
